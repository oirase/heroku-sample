name: heroku

on: [ push ]

env:
  DOCKER_BUILDKIT: 1
  IMAGE_NAME: sample_app
  IMAGE_TAG: test
  APP_NAME:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: ls -a
      - name: Node, npm setup
        uses: actions/setup-node@v1
      - run: npm install
      - name: Docker login
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u oirase --password-stdin
      - name: Build image
        run: docker build -t docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${IMAGE_TAG} .
      - name: Push image
        run: docker push docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${IMAGE_TAG}


heroku-access:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Docker login
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u oirase --password-stdin
      - name: Pull image
        run: |
          docker pull docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${IMAGE_TAG}
          docker image ls -a
      - name: Heroku setup
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
      - name: Heroku login
        run: |
          `cat >~/.netrc <<EOF
          machine api.heroku.com
              login ${{ secrets.HEROKU_USER }}
              password ${{ secrets.HEROKU_APIKEY }}
          machine git.heroku.com
              login ${{ secrets.HEROKU_USER }}
              password ${{ secrets.HEROKU_APIKEY }}
          EOF`
          heroku container:login
      - name: Heroku push
        run: |
          docker tag docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${IMAGE_TAG} registry.heroku.com/${APP_NAME}/web
          docker push registry.heroku.com/${APP_NAME}/web
          heroku container:release web








